openapi: 3.0.3
info:
  title: Swagger Car Mechanic Shop
  description: >-
    Dokumentacija za seminar iz Asinkronog web programiranja. Autori: Ante Aljinović & Marino Lučić-Raguž
  version: 1.0.0
tags:
  - name: users
    description: everything about users
  - name: cars
    description: everything about cars
  - name: services
    description: everything about services
  - name: user services
    description: everything about user services
paths:
  /users:
    get:
      tags:
        - users
      summary: Get all users
      description: This endpoint returns all the users.
      operationId: getUsers
      security:
        - Bearer: []
      responses:
        '200':
          description: A list of all users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /users/{userId}:
    get:
      tags:
        - users
      summary: Get a single user by ID
      description: This endpoint returns a user by their unique ID.
      operationId: getUserById
      security:
        - Bearer: []
      parameters:
        - name: userId
          in: path
          required: true
          description: The ID of the user to retrieve
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: A user object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User not found.
  
    put:
      tags:
        - users
      summary: Update a user by ID
      description: This endpoint allows you to update a user's information by their ID.
      operationId: updateUser
      security:
        - Bearer: []
      parameters:
        - name: userId
          in: path
          required: true
          description: The ID of the user to update
          schema:
            type: integer
            format: int64
      requestBody:
        description: User object with the updated information
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Successfully updated user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User not found.

    delete:
      tags:
        - users
      summary: Delete a user by ID
      description: This endpoint deletes a user based on their ID.
      operationId: deleteUser
      security:
        - Bearer: []
      parameters:
        - name: userId
          in: path
          required: true
          description: The ID of the user to delete
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: User successfully deleted
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User not found.
  /login:
    post:
      tags:
        - users
      summary: Login a user
      description: This endpoint allows a user to log in by providing their email and password.
      operationId: loginUser
      requestBody:
        description: The credentials of the user to log in
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: john@example.com
                password:
                  type: string
                  example: password123
      responses:
        '200':
          description: Successfully logged in
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: jwt_token_here
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Incorrect email or password. Please try again.
  /register:
    post:
      tags:
        - users
      summary: Register a new user
      description: This endpoint allows you to register a new user.
      operationId: registerUser
      requestBody:
        description: User object that needs to be registered
        content:
          application/json:
            schema:
              type: object
              properties:
                fullname:
                  type: string
                  example: John Doe
                email:
                  type: string
                  example: john@example.com
                password:
                  type: string
                  example: password123
                confirmPassword:
                  type: string
                  example: password123
      responses:
        '200':
          description: User successfully registered
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User registered successfully.
                  token:
                    type: string
                    example: jwt_token_here
        '409':
          description: Email is already in use
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Email is already in use.
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: An unexpected error occurred. Please try again later.
  /services:
    post:
      tags:
        - services
      summary: Create a new service
      description: This endpoint allows you to create a new service.
      operationId: createService
      security:
        - Bearer: []
      requestBody:
        description: The service object to be created
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Service'
      responses:
        '200':
          description: Service successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
        '400':
          description: Invalid input
        '401':
          description: Unauthorized (JWT Token required)
    get:
      tags:
        - services
      summary: Get all services
      description: This endpoint returns a list of all services.
      operationId: getServices
      security:
        - Bearer: []
      responses:
        '200':
          description: List of all services
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Service'
  /services/{serviceId}:
    get:
      tags:
        - services
      summary: Get a single service by ID
      description: This endpoint returns a service based on the provided ID.
      operationId: getServiceById
      parameters:
        - name: serviceId
          in: path
          required: true
          description: ID of the service to retrieve
          schema:
            type: integer
            example: 1
      security:
        - Bearer: []
      responses:
        '200':
          description: Service found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
        '404':
          description: Service not found

    put:
      tags:
        - services
      summary: Update an existing service by ID
      description: This endpoint updates a service's details based on its ID.
      operationId: updateService
      parameters:
        - name: serviceId
          in: path
          required: true
          description: ID of the service to update
          schema:
            type: integer
            example: 1
      requestBody:
        description: The updated service object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Service'
      security:
        - Bearer: []
      responses:
        '200':
          description: Successfully updated the service
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
        '400':
          description: Invalid input
        '404':
          description: Service not found

    delete:
      tags:
        - services
      summary: Delete a service by ID
      description: This endpoint deletes a service based on its ID.
      operationId: deleteService
      parameters:
        - name: serviceId
          in: path
          required: true
          description: ID of the service to delete
          schema:
            type: integer
            example: 1
      security:
        - Bearer: []
      responses:
        '204':
          description: Service successfully deleted
        '404':
          description: Service not found
  /cars:
    get:
      tags: 
        - cars
      summary: Get all cars
      description: Fetch a list of all cars.
      operationId: getAllCars
      security:
        - Bearer: []
      responses:
        '200':
          description: A list of cars
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Car'
        '401':
          description: Unauthorized, token missing or invalid
        '500':
          description: Internal server error

    post:
      tags: 
        - cars
      summary: Create a new car
      description: Create a new car in the system.
      operationId: createCar
      security:
        - Bearer: []
      requestBody:
        description: Car object to be created
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Car'
      responses:
        '200':
          description: Car created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Car'
        '400':
          description: Bad request, missing required fields or invalid data
        '401':
          description: Unauthorized, token missing or invalid
        '500':
          description: Internal server error
  /cars/{carId}:
    get:
      tags: 
        - cars
      summary: Get a specific car by ID
      description: Fetch details of a car by its unique ID.
      operationId: getCarById
      security:
        - Bearer: []
      parameters:
        - name: carId
          in: path
          required: true
          description: The ID of the car to retrieve.
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Car details fetched successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Car'
        '404':
          description: Car not found
        '401':
          description: Unauthorized, token missing or invalid
        '500':
          description: Internal server error
    put:
      tags: 
        - cars
      summary: Update a car by ID
      description: Update details of a specific car.
      operationId: updateCar
      security:
        - Bearer: []
      parameters:
        - name: carId
          in: path
          required: true
          description: The ID of the car to update.
          schema:
            type: integer
            example: 1
      requestBody:
        description: Car object to be updated
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Car'
      responses:
        '200':
          description: Car updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Car'
        '400':
          description: Bad request, missing required fields or invalid data
        '404':
          description: Car not found
        '401':
          description: Unauthorized, token missing or invalid
        '500':
          description: Internal server error
    delete:
      tags: 
        - cars
      summary: Delete a car by ID
      description: Delete a specific car by its ID.
      operationId: deleteCar
      security:
        - Bearer: []
      parameters:
        - name: carId
          in: path
          required: true
          description: The ID of the car to delete.
          schema:
            type: integer
            example: 1
      responses:
        '204':
          description: Car deleted successfully
        '404':
          description: Car not found
        '401':
          description: Unauthorized, token missing or invalid
        '500':
          description: Internal server error
  /user_services:
    post:
      tags:
        - user services
      summary: Create a user-service association
      description: Create an association between a user and a service.
      operationId: addUserService
      security:
        - Bearer: []
      requestBody:
        description: The user and service association to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserService'
      responses:
        '200':
          description: Association created successfully
        '400':
          description: Association already exists
        '401':
          description: Unauthorized (JWT token missing or invalid)
        '500':
          description: Internal server error
    get:
      tags:
        - user services
      summary: Get all user-service associations
      description: Retrieve all user-service associations.
      operationId: getAllUserServices
      security:
        - Bearer: []
      responses:
        '200':
          description: A list of all user-service associations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserService'
        '401':
          description: Unauthorized (JWT token missing or invalid)
        '500':
          description: Internal server error
  /user_services/user/{userid}:
    get:
      tags:
        - user services
      summary: Get services by user ID
      description: Retrieve all services associated with a specific user.
      operationId: getServicesByUserId
      security:
        - Bearer: []
      parameters:
        - name: userid
          in: path
          required: true
          description: The ID of the user.
          schema:
            type: integer
            example: 123
      responses:
        '200':
          description: A list of services associated with the user
          content:
            application/json:
              schema:
                type: array
                items:
                  type: integer
                  example: 456
        '404':
          description: User not found
        '401':
          description: Unauthorized (JWT token missing or invalid)
        '500':
          description: Internal server error
  /user_services/service/{serviceid}:
    get:
      tags:
        - user services
      summary: Get users by service ID
      description: Retrieve all users associated with a specific service.
      operationId: getUsersByServiceId
      security:
        - Bearer: []
      parameters:
        - name: serviceid
          in: path
          required: true
          description: The ID of the service.
          schema:
            type: integer
            example: 456
      responses:
        '200':
          description: A list of users associated with the service
          content:
            application/json:
              schema:
                type: array
                items:
                  type: integer
                  example: 123
        '404':
          description: Service not found
        '401':
          description: Unauthorized (JWT token missing or invalid)
        '500':
          description: Internal server error

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        email:
          type: string
          example: john@example.com
        password:
          type: string
          example: 'password123'
        fullname:
          type: string
          example: John Doe
        role:
          type: string
          enum:
            - customer
            - owner
            - mechanic
          default: customer
        contact:
          type: string
          nullable: true
          example: '+385 99-555-5555'
      required:
        - email
        - password
        - fullname
      xml:
        name: user
    Service:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        mechanicid:
          type: integer
          example: 1
        carid:
          type: integer
          example: 101
        description:
          type: string
          example: "Oil change and tire rotation"
        status:
          type: string
          enum:
            - pending
            - in progress
            - completed
          example: "pending"
        starttime:
          type: string
          format: date-time
          example: "2024-12-24T08:00:00Z"
        endtime:
          type: string
          format: date-time
          example: "2024-12-24T10:00:00Z"
        price:
          type: number
          format: float
          example: 150.00
      required:
        - mechanicid
        - carid
        - status
        - price
      xml:
        name: service
    Car:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: The unique identifier for the car.
          example: 1
        make:
          type: string
          description: The make of the car (e.g., Toyota, Ford).
          example: "Toyota"
        model:
          type: string
          description: The model of the car (e.g., Corolla, Focus).
          example: "Corolla"
        userid:
          type: integer
          format: int64
          description: The ID of the user who owns the car, referenced from the `users` table.
          example: 123
        manufacturingyear:
          type: integer
          description: The manufacturing year of the car.
          example: 2020
      required:
        - make
        - model
        - userid
    UserService:
      type: object
      properties:
        userid:
          type: integer
          format: int64
          description: The ID of the user, referenced from the `users` table.
          example: 123
        serviceid:
          type: integer
          format: int64
          description: The ID of the service, referenced from the `services` table.
          example: 456
      required:
        - userid
        - serviceid
  requestBodies:
    User:
      description: User object that needs to be added
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
        application/xml:
          schema:
            $ref: '#/components/schemas/User'
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
  securitySchemes:
    Bearer:
      type: http
      scheme: bearer
      bearerFormat: JWT
